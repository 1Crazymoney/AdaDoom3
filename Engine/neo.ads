with Ada.Text_IO;
with Ada.Wide_Text_IO;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
with Ada.Containers.Indefinite_Hashed_Maps;
with Ada.Containers.Indefinite_Ordered_Maps;
with Ada.Containers.Indefinite_Vectors;
with Ada.Containers.Vectors;
with Ada.Characters.Latin_1; 
with Ada.Strings.Wide_Unbounded.Wide_Hash;
with Ada.Strings.Wide_Unbounded; use Ada.Strings.Wide_Unbounded;
with Ada.Strings.Wide_Fixed;     use Ada.Strings.Wide_Fixed;
with Ada.Strings.Unbounded;      use Ada.Strings.Unbounded;
with Ada.Strings.Fixed;          use Ada.Strings.Fixed;
with Ada.Strings;                use Ada.Strings;
with Ada.Streams;                use Ada.Streams;
with Ada.Calendar;               use Ada.Calendar;
with Ada.Containers;             use Ada.Containers;
with Ada.Exceptions;             use Ada.Exceptions;
with Interfaces.C;               use Interfaces.C;
with Interfaces;                 use Interfaces;
with System;                     use System;
package Neo is
  pragma Suppress(Elaboration_Check);
  Title_Is_Too_Long                   : Exception;
  Unimplemented_Feature               : Exception;
  Timer_Started_Without_Being_Stopped : Exception;
  Timer_Stopped_Without_Being_Started : Exception;
  subtype Character_1_C is Interfaces.C.Char;
  subtype Character_1   is Character;
  subtype Character_2_C is Interfaces.C.WChar_T;
  subtype Character_2   is Wide_Character;
  subtype String_1_C         is Interfaces.C.Char_Array;
  subtype String_1           is String;
  subtype String_1_Unbounded is Ada.Strings.Unbounded.Unbounded_String;
  subtype String_2_C         is Interfaces.C.WChar_Array;
  subtype String_2           is Wide_String;
  subtype String_2_Unbounded is Ada.Strings.Wide_Unbounded.Unbounded_Wide_String;
  type    Integer_Address      is mod MEMORY_SIZE;
  type    Integer_1_Percent    is range 1..100; for Integer_1_Percent'size use 8;
  subtype Integer_1_Unsigned   is Unsigned_8;
  subtype Integer_1_Unsigned_C is Interfaces.C.Unsigned_Char;
  subtype Integer_1_Signed     is Short_Short_Integer;
  subtype Integer_1_Signed_C   is Interfaces.C.Char;
  subtype Integer_1_Natural    is Integer_1_Unsigned;
  subtype Integer_1_Positive   is Integer_1_Unsigned range 1..Integer_1_Unsigned'last;
  subtype Integer_2_Unsigned   is Unsigned_16;
  subtype Integer_2_Unsigned_C is Interfaces.C.Unsigned_Short;
  subtype Integer_2_Signed     is Short_Integer;
  subtype Integer_2_Signed_C   is Interfaces.C.Short;
  subtype Integer_2_Natural    is Integer_2_Unsigned;
  subtype Integer_2_Positive   is Integer_1_Unsigned range 1..Integer_1_Unsigned'last;
  subtype Integer_4_Unsigned   is Unsigned_32;
  subtype Integer_4_Unsigned_C is Interfaces.C.Unsigned;
  subtype Integer_4_Signed     is Integer;
  subtype Integer_4_Signed_C   is Interfaces.C.Int;
  subtype Integer_4_Natural    is Natural;
  subtype Integer_4_Positive   is Positive;
  subtype Integer_8_Unsigned   is Unsigned_64;
  subtype Integer_8_Unsigned_C is Integer_8_Unsigned;
  subtype Integer_8_Signed     is Long_Long_Integer;
  subtype Integer_8_Signed_C   is Integer_8_Signed;
  subtype Integer_8_Natural    is Integer_8_Unsigned;
  subtype Integer_8_Positive   is Integer_8_Unsigned range 1..Integer_8_Unsigned'last;
  subtype Integer_Size_C       is Interfaces.C.Size_T;
  subtype Float_8_Real         is Long_Float;
  subtype Float_8_Real_C       is Interfaces.C.Double;
  subtype Float_8_Natural      is Float_8_Real range 0.0..Float_8_Real'last;
  subtype Float_8_Positive     is Float_8_Real range 1.0..Float_8_Real'last;
  subtype Float_8_Range        is Float_8_Real range -100.0..100.0;
  subtype Float_8_Percent      is Float_8_Real range 0.0..100.0;
  subtype Float_8_Degree       is Float_8_Real range 1.0..360.0;
  subtype Float_4_Real         is Float;
  subtype Float_4_Real_C       is Interfaces.C.C_Float;
  subtype Float_4_Natural      is Float_4_Real range 0.0..Float_4_Real'last;
  subtype Float_4_Positive     is Float_4_Real range 1.0..Float_4_Real'last;
  subtype Float_4_Range        is Float_4_Real range -100.0..100.0;
  subtype Float_4_Percent      is Float_4_Real range 0.0..100.0;
  subtype Float_4_Degree       is Float_4_Real range 1.0..360.0;
  subtype Byte                 is Integer_1_Unsigned;
  type Access_String_2               is access all String_2;
  type Access_String_1_C             is access all String_1_C;
  type Access_String_1               is access all String_1;
  type Access_String_2_C             is access all String_2_C;
  type Access_Integer_Address        is access all Integer_Address;
  type Access_Integer_8_Unsigned_C   is access all Integer_8_Unsigned_C;
  type Access_Integer_4_Unsigned_C   is access all Integer_4_Unsigned_C;
  type Access_Integer_4_Unsigned     is access all Integer_4_Unsigned;
  type Access_Integer_4_Signed_C     is access all Integer_4_Signed_C;
  type Access_Integer_2_Unsigned_C   is access all Integer_2_Unsigned_C;
  type Access_Integer_1_Unsigned_C   is access all Integer_1_Unsigned_C;
  type Access_Float_4_Real_C         is access all Float_4_Real_C;
  type Access_Character_1_C          is access all Interfaces.C.Char;
  type Access_Character_2_C          is access all Character_2_C;
  type Access_Constant_Character_1_C is access constant Character_1_C;
  type Access_Constant_Character_2_C is access constant Character_2_C;
  type Access_Constant_String_2_C    is access constant String_2_C;
  type Access_Procedure              is access procedure;
  type Access_Function_Localize      is access function(Item : in String_2) return String_2;
  type Access_Procedure_Put          is access procedure(Item : in String_2);
  type Array_Boolean              is array(Integer_4_Positive range <>) of Boolean;
  type Array_Duration             is array(Integer_4_Positive range <>) of Duration;
  type Array_Address              is array(Integer_4_Positive range <>) of Address;
  type Array_Access_String_2      is array(Integer_4_Positive range <>) of Access_String_2;
  type Array_String_2_Unbounded   is array(Integer_4_Positive range <>) of String_2_Unbounded;
  type Array_Character_1_C        is array(Integer_4_Positive range <>) of Character_1_C;
  type Array_Character_1          is array(Integer_4_Positive range <>) of Character_1;
  type Array_Character_2_C        is array(Integer_4_Positive range <>) of Character_2_C;
  type Array_Character_2          is array(Integer_4_Positive range <>) of Character_2;
  type Array_Integer_Address      is array(Integer_4_Positive range <>) of Integer_Address;
  type Array_Integer_1_Unsigned_C is array(Integer_4_Positive range <>) of Integer_1_Unsigned_C;
  type Array_Integer_1_Unsigned   is array(Integer_4_Positive range <>) of Integer_1_Unsigned;
  type Array_Integer_1_Signed_C   is array(Integer_4_Positive range <>) of Integer_1_Signed_C;
  type Array_Integer_1_Signed     is array(Integer_4_Positive range <>) of Integer_1_Signed;
  type Array_Integer_1_Natural    is array(Integer_4_Positive range <>) of Integer_1_Natural;
  type Array_Integer_1_Positive   is array(Integer_4_Positive range <>) of Integer_1_Positive;
  type Array_Integer_2_Unsigned_C is array(Integer_4_Positive range <>) of Integer_2_Unsigned_C;
  type Array_Integer_2_Unsigned   is array(Integer_4_Positive range <>) of Integer_2_Unsigned;
  type Array_Integer_2_Signed_C   is array(Integer_4_Positive range <>) of Integer_2_Signed_C;
  type Array_Integer_2_Signed     is array(Integer_4_Positive range <>) of Integer_2_Signed;
  type Array_Integer_2_Natural    is array(Integer_4_Positive range <>) of Integer_2_Natural;
  type Array_Integer_2_Positive   is array(Integer_4_Positive range <>) of Integer_2_Positive;
  type Array_Integer_4_Unsigned_C is array(Integer_4_Positive range <>) of Integer_4_Unsigned_C;
  type Array_Integer_4_Unsigned   is array(Integer_4_Positive range <>) of Integer_4_Unsigned;
  type Array_Integer_4_Signed_C   is array(Integer_4_Positive range <>) of Integer_4_Signed_C;
  type Array_Integer_4_Signed     is array(Integer_4_Positive range <>) of Integer_4_Signed;
  type Array_Integer_4_Natural    is array(Integer_4_Positive range <>) of Integer_4_Natural;
  type Array_Integer_4_Positive   is array(Integer_4_Positive range <>) of Integer_4_Positive;
  type Array_Integer_8_Unsigned   is array(Integer_4_Positive range <>) of Integer_8_Unsigned;
  type Array_Integer_8_Unsigned_C is array(Integer_4_Positive range <>) of Integer_8_Unsigned_C;
  type Array_Integer_8_Signed     is array(Integer_4_Positive range <>) of Integer_8_Signed;
  type Array_Integer_8_Signed_C   is array(Integer_4_Positive range <>) of Integer_8_Signed_C;
  type Array_Integer_8_Natural    is array(Integer_4_Positive range <>) of Integer_8_Natural;
  type Array_Integer_8_Positive   is array(Integer_4_Positive range <>) of Integer_8_Positive;
  type Array_Integer_Size_C       is array(Integer_4_Positive range <>) of Integer_Size_C;
  type Array_Float_8_Real_C       is array(Integer_4_Positive range <>) of Float_8_Real_C;
  type Array_Float_8_Real         is array(Integer_4_Positive range <>) of Float_8_Real;
  type Array_Float_8_Natural      is array(Integer_4_Positive range <>) of Float_8_Natural;
  type Array_Float_8_Positive     is array(Integer_4_Positive range <>) of Float_8_Positive;
  type Array_Float_8_Percent      is array(Integer_4_Positive range <>) of Float_8_Percent;
  type Array_Float_8_Degree       is array(Integer_4_Positive range <>) of Float_8_Degree;
  type Array_Float_4_Real_C       is array(Integer_4_Positive range <>) of Float_4_Real_C;
  type Array_Float_4_Real         is array(Integer_4_Positive range <>) of Float_4_Real;
  type Array_Float_4_Natural      is array(Integer_4_Positive range <>) of Float_4_Natural;
  type Array_Float_4_Positive     is array(Integer_4_Positive range <>) of Float_4_Positive;
  type Array_Float_4_Percent      is array(Integer_4_Positive range <>) of Float_4_Percent;
  type Array_Float_4_Degree       is array(Integer_4_Positive range <>) of Float_4_Degree;
  type Access_Array_Address              is access all Array_Address;
  type Access_Array_Access_String_2      is access all Array_Access_String_2;
  type Access_Array_Character_1_C        is access all Array_Character_1_C;
  type Access_Array_Character_1          is access all Array_Character_1;
  type Access_Array_Character_2_C        is access all Array_Character_2_C;
  type Access_Array_Character_2          is access all Array_Character_2;
  type Access_Array_Integer_1_Unsigned_C is access all Array_Integer_1_Unsigned_C;
  type Access_Array_Integer_1_Unsigned   is access all Array_Integer_1_Unsigned;
  type Access_Array_Integer_1_Signed_C   is access all Array_Integer_1_Signed_C;
  type Access_Array_Integer_1_Signed     is access all Array_Integer_1_Signed;
  type Access_Array_Integer_1_Natural    is access all Array_Integer_1_Natural;
  type Access_Array_Integer_1_Positive   is access all Array_Integer_1_Positive;
  type Access_Array_Integer_2_Unsigned_C is access all Array_Integer_2_Unsigned_C;
  type Access_Array_Integer_2_Unsigned   is access all Array_Integer_2_Unsigned;
  type Access_Array_Integer_2_Signed_C   is access all Array_Integer_2_Signed_C;
  type Access_Array_Integer_2_Signed     is access all Array_Integer_2_Signed;
  type Access_Array_Integer_2_Natural    is access all Array_Integer_2_Natural;
  type Access_Array_Integer_2_Positive   is access all Array_Integer_2_Positive;
  type Access_Array_Integer_4_Unsigned_C is access all Array_Integer_4_Unsigned_C;
  type Access_Array_Integer_4_Unsigned   is access all Array_Integer_4_Unsigned;
  type Access_Array_Integer_4_Signed_C   is access all Array_Integer_4_Signed_C;
  type Access_Array_Integer_4_Signed     is access all Array_Integer_4_Signed;
  type Access_Array_Integer_4_Natural    is access all Array_Integer_4_Natural;
  type Access_Array_Integer_4_Positive   is access all Array_Integer_4_Positive;
  type Access_Array_Integer_8_Unsigned   is access all Array_Integer_8_Unsigned;
  type Access_Array_Integer_8_Unsigned_C is access all Array_Integer_8_Unsigned_C;
  type Access_Array_Integer_8_Signed     is access all Array_Integer_8_Signed;
  type Access_Array_Integer_8_Signed_C   is access all Array_Integer_8_Signed_C;
  type Access_Array_Integer_8_Natural    is access all Array_Integer_8_Natural;
  type Access_Array_Integer_8_Positive   is access all Array_Integer_8_Positive;
  type Access_Array_Integer_Size_C       is access all Array_Integer_Size_C;
  type Access_Array_Float_8_Real_C       is access all Array_Float_8_Real_C;
  type Access_Array_Float_8_Real         is access all Array_Float_8_Real;
  type Access_Array_Float_8_Natural      is access all Array_Float_8_Natural;
  type Access_Array_Float_8_Positive     is access all Array_Float_8_Positive;
  type Access_Array_Float_8_Percent      is access all Array_Float_8_Percent;
  type Access_Array_Float_8_Degree       is access all Array_Float_8_Degree;
  type Access_Array_Float_4_Real_C       is access all Array_Float_4_Real_C;
  type Access_Array_Float_4_Real         is access all Array_Float_4_Real;
  type Access_Array_Float_4_Natural      is access all Array_Float_4_Natural;
  type Access_Array_Float_4_Positive     is access all Array_Float_4_Positive;
  type Access_Array_Float_4_Percent      is access all Array_Float_4_Percent;
  type Access_Array_Float_4_Degree       is access all Array_Float_4_Degree;
  type Record_Timer is private;
  type Record_Color is record
      Red   : Integer_1_Unsigned := 16#FF#;
      Green : Integer_1_Unsigned := 16#FF#;
      Blue  : Integer_1_Unsigned := 16#FF#;
    end record;
  protected type Protected_Status is
      function Is_Doing_Something return Boolean;
      procedure Set_Is_Doing_Something(Value : in Boolean);
    private
      Status : Boolean := False;
    end Protected_Status;
  package Vector_String_2_Unbounded is new Ada.Containers.Vectors(Integer_4_Positive, String_2_Unbounded);
  package Vector_Address            is new Ada.Containers.Vectors(Integer_4_Positive, Address);
  procedure Set_Failure;
  function Get_Duration         (Timer : in     Record_Timer) return Duration;
  procedure Start               (Timer : in out Record_Timer);
  procedure Stop                (Timer : in out Record_Timer);
  procedure New_Line            (Count : in Integer_4_Positive := 1);
  procedure Put_Debug           (Item  : in Character_2);
  procedure Put                 (Item  : in Character_2);
  procedure Put                 (Item  : in String_2);
  procedure Put_Title           (Item  : in String_2);
  procedure Put_Line            (Item  : in String_2);
  procedure Put_Line            (Item  : in String_2_Unbounded);
  procedure Put_Line            (Item  : in Character_2);
  procedure Put_Debug           (Item  : in String_2);
  procedure Put_Debug_Line      (Item  : in String_2);
  procedure Set_Input_Entry     (Value : in String_2);
  procedure Set_Do_Put_Debug    (Value : in Boolean);
  procedure Set_Line_Size       (Value : in Integer_4_Positive);
  procedure Set_Put             (Value : in Access_Procedure_Put);
  procedure Set_Number_Of_Tasks (Value : in Integer_4_Positive);
  function Split                (Item  : in String_2; On : in String_2 := " ") return Vector_String_2_Unbounded.Vector;
  function Localize             (Item  : in String_2) return String_2;
  function Get_Extension        (Path  : in String_2) return String_2;
  function Length (Source : Unbounded_Wide_String) return Natural renames Ada.Strings.Wide_Unbounded.Length;
  function Get_Line_Size                              return Integer_4_Positive;
  function Get_Number_Of_Tasks                        return Integer_4_Positive;
  function Get_Number_Of_Lines                        return Integer_8_Natural;
  function Get_Log                                    return String_2;
  function Get_Input_Entry                            return String_2;
  function Did_Fail                                   return Boolean;
  function Do_Put_Debug                               return Boolean;
  function To_Access_Constant_Character_1_C (Item : in String_1)                      return Access_Constant_Character_1_C;
  function To_Access_Constant_Character_2_C (Item : in String_2)                      return Access_Constant_Character_2_C;
  --function To_Access_Constant_Character_2_C (Item : in String_2_C)                    return Access_Constant_Character_2_C;
  function To_Access_Constant_Character_2_C (Item : in String_2_Unbounded)            return Access_Constant_Character_2_C;
  function To_Access_Character_1_C          (Item : in String_1_C)                    return Access_Character_1_C;
  function To_Access_Character_2_C          (Item : in String_2)                      return Access_Character_2_C;
  function To_Character_1                   (Item : in Character_2)                   return Character_1;
  function To_Character_1                   (Item : in Character_1_C)                 return Character_1;
  function To_Character_1                   (Item : in Character_2_C)                 return Character_1;
  function To_Character_1_C                 (Item : in Character_2)                   return Character_1_C;
  function To_Character_1_C                 (Item : in Character_2_C)                 return Character_1_C;
  function To_Character_1_C                 (Item : in Character_1)                   return Character_1_C;
  function To_Character_2                   (Item : in Character_2_C)                 return Character_2;
  function To_Character_2                   (Item : in Character_1_C)                 return Character_2;
  function To_Character_2                   (Item : in Character_1)                   return Character_2;
  function To_Character_2_C                 (Item : in Character_2)                   return Character_2_C;
  function To_Character_2_C                 (Item : in Character_1_C)                 return Character_2_C;
  function To_Character_2_C                 (Item : in Character_1)                   return Character_2_C;
  --function To_String_1_C                    (Item : in String_2)                      return String_1_C;
  function To_String_1                      (Item : in String_2)                      return String_1;
  function To_String_1_C                    (Item : in String_1)                      return String_1_C;
  function To_String_1                      (Item : in String_1_C)                    return String_1;
  function To_String_1                      (Item : in Access_Constant_Character_1_C) return String_1;
  function To_String_1                      (Item : in String_1_Unbounded)            return String_1           renames Ada.Strings.Unbounded.To_String;
  function To_String_1_Unbounded            (Item : in String_1)                      return String_1_Unbounded renames Ada.Strings.Unbounded.To_Unbounded_String;
  function To_String_2                      (Item : in String_2_Unbounded)            return String_2           renames Ada.Strings.Wide_Unbounded.To_Wide_String;
  function To_String_2_Unbounded            (Item : in String_2)                      return String_2_Unbounded renames Ada.Strings.Wide_Unbounded.To_Unbounded_Wide_String;
  function To_String_2_Unbounded            (Item : in Character_2)                   return String_2_Unbounded;
  function To_String_2_C                    (Item : in String_2_Unbounded)            return String_2_C;    
  function To_String_2_C                    (Item : in String_2)                      return String_2_C;
  function To_String_2                      (Item : in String_1_C)                    return String_2;
  function To_String_2                      (Item : in String_1)                      return String_2;
  function To_String_2                      (Item : in String_2_C)                    return String_2;
  function To_String_2                      (Item : in Character_1)                   return String_2;
  function To_String_2                      (Item : in Character_2)                   return String_2;
  function To_String_2                      (Item : in Access_Constant_Character_2_C) return String_2;
  function To_String_2                      (Item : in Access_Constant_Character_1_C) return String_2;
  generic
    type Type_Number is mod <>;
  function Generic_To_String_2(Item : in Type_Number; Base : in Integer_4_Positive; Do_Pad_Zeros : in Boolean := True) return String_2;
  function To_Unchecked_Access_Integer_2_Unsigned_C   is new Ada.Unchecked_Conversion(Address,                       Access_Integer_2_Unsigned_C);
  function To_Unchecked_Access_Integer_2_Unsigned_C   is new Ada.Unchecked_Conversion(Integer_Address,               Access_Integer_2_Unsigned_C);
  function To_Unchecked_Access_Integer_4_Unsigned     is new Ada.Unchecked_Conversion(Address,                       Access_Integer_4_Unsigned);
  function To_Unchecked_Access_Character_1_C          is new Ada.Unchecked_Conversion(Address,                       Access_Character_1_C);
  function To_Unchecked_Access_Character_2_C          is new Ada.Unchecked_Conversion(Address,                       Access_Character_2_C);
  function To_Unchecked_Access_Constant_Character_1_C is new Ada.Unchecked_Conversion(Address,                       Access_Constant_Character_1_C);
  function To_Unchecked_Access_Constant_Character_2_C is new Ada.Unchecked_Conversion(Address,                       Access_Constant_Character_2_C);
  function To_Unchecked_Access_Constant_Character_2_C is new Ada.Unchecked_Conversion(Integer_Address,               Access_Constant_Character_2_C);
  function To_Unchecked_Address                       is new Ada.Unchecked_Conversion(Access_Constant_Character_2_C, Address);
  function To_Unchecked_Address                       is new Ada.Unchecked_Conversion(Integer_Address,               Address);
  function To_Unchecked_Integer_4_Unsigned_C          is new Ada.Unchecked_Conversion(Integer_4_Signed_C,            Integer_4_Unsigned_C);
  function To_Unchecked_Integer_4_Unsigned            is new Ada.Unchecked_Conversion(Integer_4_Signed_C,            Integer_4_Unsigned);
  function To_Unchecked_Integer_4_Unsigned            is new Ada.Unchecked_Conversion(Float_4_Real,                  Integer_4_Unsigned);
  function To_Unchecked_Integer_4_Signed_C            is new Ada.Unchecked_Conversion(Integer_4_Unsigned_C,          Integer_4_Signed_C);
  function To_Unchecked_Integer_4_Signed              is new Ada.Unchecked_Conversion(Integer_4_Unsigned,            Integer_4_Signed);
  function To_Unchecked_Integer_2_Signed              is new Ada.Unchecked_Conversion(Integer_2_Unsigned,            Integer_2_Signed);
  function To_Unchecked_Integer_2_Signed_C            is new Ada.Unchecked_Conversion(Integer_2_Unsigned,            Integer_2_Signed_C);
  function To_Unchecked_Integer_2_Unsigned            is new Ada.Unchecked_Conversion(Character_2_C,                 Integer_2_Unsigned);
  function To_Unchecked_Integer_Address               is new Ada.Unchecked_Conversion(Access_Integer_2_Unsigned_C,   Integer_Address);
  function To_Unchecked_Integer_Address               is new Ada.Unchecked_Conversion(Access_Constant_Character_2_C, Integer_Address);
  function To_Unchecked_Integer_Address               is new Ada.Unchecked_Conversion(Access_Constant_Character_1_C, Integer_Address);
  function To_Unchecked_Integer_Address               is new Ada.Unchecked_Conversion(Address,                       Integer_Address);
  function To_Unchecked_Float_4_Real                  is new Ada.Unchecked_Conversion(Float_4_Real,                  Integer_4_Unsigned);
  generic
    type Type_To_Vector is private;
  package Vectors is
      package Unsafe is new Ada.Containers.Indefinite_Vectors(Integer_4_Positive, Type_To_Vector);
      subtype Cursor is Unsafe.Cursor;
      protected type Protected_Vector is
          procedure Clear;
          procedure Set        (Data : in Unsafe.Vector);
          procedure Next       (Position : in out Cursor);
          procedure Replace    (Position : in Cursor; New_Item : in Type_To_Vector);
          procedure Append                                     (New_Item : in Type_To_Vector; Count : in Integer_4_Positive := 1);
          procedure Prepend                                    (New_Item : in Type_To_Vector; Count : in Integer_4_Positive := 1);
          procedure Insert     (Before : in Integer_4_Positive; New_Item : in Type_To_Vector; Count : in Integer_4_Positive := 1);
          procedure Delete     (Index  : in Integer_4_Positive;                               Count : in Integer_4_Positive := 1);
          function Element     (Index  : in Integer_4_Positive) return Type_To_Vector;
          function Element     (Position : in Cursor)           return Type_To_Vector;
          function Has_Element (Position : in Cursor)           return Boolean;
          function First                                        return Cursor;
          function Length                                       return Integer_4_Positive;
          function Get                                          return Unsafe.Vector;
        private
          Current_Data : Unsafe.Vector;
        end Protected_Vector;
    end Vectors;
  generic
    type Type_To_Map is private;
  package Hashed_Maps is
      package Unsafe is new Ada.Containers.Indefinite_Hashed_Maps(String_2_Unbounded, Type_To_Map, Wide_Hash, "="); use Unsafe;
      subtype Cursor is Unsafe.Cursor;
      protected type Protected_Map is
          procedure Clear;
          procedure Set        (Data : in Unsafe.Map);
          procedure Replace    (Position : in Cursor; New_Item : in Type_To_Map);
          procedure Next       (Position : in out Cursor);
          procedure Delete     (Position : in out Cursor);
          procedure Delete     (Key : in String_2);
          procedure Insert     (Key : in String_2; New_Item : in Type_To_Map);
          procedure Replace    (Key : in String_2; New_Item : in Type_To_Map);
          function Element     (Key : in String_2)    return Type_To_Map;
          function Element     (Position : in Cursor) return Type_To_Map;
          function Has_Element (Key : in String_2)    return Boolean;
          function Has_Element (Position : in Cursor) return Boolean;
          function Key         (Position : Cursor)    return String_2;
          function First                              return Cursor;
          function Get                                return Unsafe.Map;
        private
          Current_Data : Map;
        end Protected_Map;
    end Hashed_Maps; 
  generic
    type Type_To_Key is (<>);
    type Type_To_Map is private;
  package Ordered_Maps is
      package Unsafe is new Ada.Containers.Indefinite_Ordered_Maps(Type_To_Key, Type_To_Map, "<", "="); use Unsafe;
      subtype Cursor is Unsafe.Cursor;
      protected type Protected_Map is
          procedure Clear;
          procedure Set        (Data : in Unsafe.Map);
          procedure Next       (Position : in out Cursor);
          procedure Delete     (Position : in out Cursor);
          procedure Replace    (Position : in Cursor; New_Item : in Type_To_Map);
          procedure Delete     (Key : in Type_To_Key);
          procedure Insert     (Key : in Type_To_Key; New_Item : in Type_To_Map);
          procedure Replace    (Key : in Type_To_Key; New_Item : in Type_To_Map);
          function Element     (Key : in Type_To_Key) return Type_To_Map;
          function Element     (Position : in Cursor) return Type_To_Map;
          function Has_Element (Key : in Type_To_Key) return Boolean;
          function Has_Element (Position : in Cursor) return Boolean;
          function Key         (Position : Cursor)    return Type_To_Key;
          function First                              return Cursor;
          function Get                                return Unsafe.Map;
        private
          Current_Data : Map;
        end Protected_Map;
    end Ordered_Maps; 
  PATH_LOGS               : constant String_2           := "Logs";
  PATH_SETTINGS           : constant String_2           := "Settings";
  PATH_ASSETS             : constant String_2           := "Assets";
  PATH_DOCUMENTS          : constant String_2           := "Documents";
  PATH_REPLAYS            : constant String_2           := "Replays";
  NAME_ICON               : constant String_2           := "icon";
  NAME_CURSOR_ACTIVE      : constant String_2           := "cursor_active";
  NAME_CURSOR_INACTIVE    : constant String_2           := "cursor_inactive";
  C_TRUE                  : constant Integer_4_Signed_C := 1;
  C_FALSE                 : constant Integer_4_Signed_C := 0;
  INITIAL_TIME            : constant Time               := Clock;
  CHARACTER_2_REPLACEMENT : constant Character_1        := '~';
  WORD_SIZE_IMAGE         : constant String_1           := Integer_4_Signed'image(WORD_SIZE)(Integer_4_Signed'image(WORD_SIZE)'first + 1..Integer_4_Signed'image(WORD_SIZE)'last);
  END_LINE_1              : constant String_1           := Ada.Characters.Latin_1.CR & Ada.Characters.Latin_1.LF;
  END_LINE_2              : constant String_2           := To_String_2(END_LINE_1);
  TAB_1                   : constant String_1           := "" & Ada.Characters.Latin_1.HT;
  TAB_2                   : constant String_2           := To_String_2(TAB_1);
  NULL_STRING_1           : constant String_1           := "";
  NULL_STRING_1_UNBOUNDED : constant String_1_Unbounded := NULL_UNBOUNDED_STRING;
  NULL_STRING_2           : constant String_2           := "";
  NULL_STRING_2_C         : constant String_2_C         := To_String_2_C(NULL_STRING_2);
  NULL_STRING_2_UNBOUNDED : constant String_2_Unbounded := NULL_UNBOUNDED_WIDE_STRING;
  NULL_CHARACTER_1        : constant Character_1        := Ada.Characters.Latin_1.NUL;
  NULL_CHARACTER_1_C      : constant Character_1_C      := Interfaces.C.NUL;
  NULL_CHARACTER_2        : constant Character_2        := Character_2'val(Character_1'pos(NULL_CHARACTER_1));
  NULL_CHARACTER_2_C      : constant Character_2_C      := Character_2_C'val(Character_1_C'pos(NULL_CHARACTER_1_C));
  COLOR_RED               : constant Record_Color       := (16#FF#, 16#00#, 16#00#);
  COLOR_TAN               : constant Record_Color       := (16#D2#, 16#B4#, 16#8C#);
  COLOR_BLUE              : constant Record_Color       := (16#00#, 16#00#, 16#FF#);
  COLOR_PINK              : constant Record_Color       := (16#FF#, 16#C0#, 16#CB#);
  COLOR_AQUA              : constant Record_Color       := (16#00#, 16#FF#, 16#FF#);
  COLOR_GRAY              : constant Record_Color       := (16#80#, 16#80#, 16#80#);
  COLOR_CYAN              : constant Record_Color       := (16#00#, 16#FF#, 16#FF#);
  COLOR_TEAL              : constant Record_Color       := (16#00#, 16#80#, 16#80#);
  COLOR_LIME              : constant Record_Color       := (16#BF#, 16#FF#, 16#00#);
  COLOR_PUCE              : constant Record_Color       := (16#CC#, 16#88#, 16#99#);
  COLOR_PLUM              : constant Record_Color       := (16#84#, 16#31#, 16#79#);
  COLOR_MAUVE             : constant Record_Color       := (16#E0#, 16#B0#, 16#FF#);
  COLOR_BLACK             : constant Record_Color       := (16#00#, 16#00#, 16#00#);
  COLOR_WHITE             : constant Record_Color       := (16#FF#, 16#FF#, 16#FF#);
  COLOR_GREEN             : constant Record_Color       := (16#00#, 16#FF#, 16#00#);
  COLOR_KHAKI             : constant Record_Color       := (16#C3#, 16#B0#, 16#91#);
  COLOR_IVORY             : constant Record_Color       := (16#FF#, 16#FF#, 16#F0#);
  COLOR_BEIGE             : constant Record_Color       := (16#F5#, 16#F5#, 16#DC#);
  COLOR_WHEAT             : constant Record_Color       := (16#F5#, 16#DE#, 16#B3#);
  COLOR_CORAL             : constant Record_Color       := (16#FF#, 16#7F#, 16#50#);
  COLOR_OLIVE             : constant Record_Color       := (16#80#, 16#80#, 16#00#);
  COLOR_SILVER            : constant Record_Color       := (16#C0#, 16#C0#, 16#C0#);
  COLOR_YELLOW            : constant Record_Color       := (16#FF#, 16#FF#, 16#00#);
  COLOR_ORANGE            : constant Record_Color       := (16#FF#, 16#A5#, 16#00#);
  COLOR_VIOLET            : constant Record_Color       := (16#EE#, 16#82#, 16#EE#);
  COLOR_PURPLE            : constant Record_Color       := (16#80#, 16#00#, 16#80#);
  COLOR_SALMON            : constant Record_Color       := (16#FA#, 16#80#, 16#72#);
  COLOR_INDIGO            : constant Record_Color       := (16#4B#, 16#00#, 16#82#);
  COLOR_MAROON            : constant Record_Color       := (16#80#, 16#00#, 16#00#);
  COLOR_GOLDEN            : constant Record_Color       := (16#FF#, 16#D7#, 16#00#);
  COLOR_MAGENTA           : constant Record_Color       := (16#FF#, 16#00#, 16#FF#);
  COLOR_FUCHSIA           : constant Record_Color       := (16#FF#, 16#77#, 16#FF#);
  COLOR_CRIMSON           : constant Record_Color       := (16#DC#, 16#14#, 16#3C#);
  COLOR_LAVENDER          : constant Record_Color       := (16#B5#, 16#7E#, 16#DC#);
  COLOR_SKY_BLUE          : constant Record_Color       := (16#87#, 16#CE#, 16#EB#);
  COLOR_CHARCOAL          : constant Record_Color       := (16#46#, 16#46#, 16#46#);
  COLOR_HOT_PINK          : constant Record_Color       := (16#FC#, 16#0F#, 16#C0#);
  COLOR_GOLDENROD         : constant Record_Color       := (16#DA#, 16#A5#, 16#20#);
  COLOR_NAVY_BLUE         : constant Record_Color       := (16#00#, 16#00#, 16#80#);
  COLOR_LIGHT_BLUE        : constant Record_Color       := (16#AD#, 16#D8#, 16#E6#);
  COLOR_ROYAL_BLUE        : constant Record_Color       := (16#08#, 16#4C#, 16#9E#);
  COLOR_AQUAMARINE        : constant Record_Color       := (16#7F#, 16#FF#, 16#D4#);
  COLOR_CHARTREUSE        : constant Record_Color       := (16#7F#, 16#FF#, 16#00#);
  COLOR_FOREST_GREEN      : constant Record_Color       := (16#22#, 16#8B#, 16#22#);
private
  type Record_Timer is record
      Start      : Time;
      Last       : Duration := 0.0;
      Is_Stopped : Boolean  := False;
    end record;
  DO_PUT_LOCALIZE_FAILURE           : constant Boolean            := False;
  HANG_DELAY                        : constant Duration           := 3.0;
  HANG_INDICATORS_DRAWN_PER_SECOND  : constant Float_4_Real       := 0.5;
  RADIAN_IMAGE_STRING_SIZE          : constant Integer_4_Positive := 256;
  FAILED_LOCALIZE_PREVIEW_LENGTH    : constant Integer_4_Positive := 10;
  DEFAULT_LINE_SIZE                 : constant Integer_4_Positive := 80;
  CALLBACK_TRACE_LIMIT              : constant Integer_4_Positive := 256;
  TESTING_SEPARATOR                 : constant Character_2        := Character_2'val(16#250F#);
  protected type Protected_Data is
      procedure Set_Failure;
      procedure Set_Input_Entry     (Value : in String_2);
      procedure Set_Do_Put_Debug    (Value : in Boolean);
      procedure Set_Line_Size       (Value : in Integer_4_Positive);
      procedure Set_Number_Of_Tasks (Value : in Integer_4_Positive);
      procedure Set_Put             (Value : in Access_Procedure_Put);
      procedure Set_Localize        (Value : in Access_Function_Localize);
      procedure Put                 (Item  : in String_2);
      function Localize             (Item  : in String_2) return String_2;
      function Get_Log                                    return String_2;
      function Get_Input_Entry                            return String_2;
      function Get_Line_Size                              return Integer_4_Positive;
      function Get_Number_Of_Tasks                        return Integer_4_Positive;
      function Get_Number_Of_Lines                        return Integer_8_Natural;
      function Did_Fail                                   return Boolean;
      function Do_Put_Debug                               return Boolean;
    private
      Current_Put             : Access_Procedure_Put     := null;--Ada.Wide_Text_IO.Put'access;
      Current_Localize        : Access_Function_Localize := null;
      Current_Log             : String_2_Unbounded       := NULL_STRING_2_UNBOUNDED;
      Current_Input_Entry     : String_2_Unbounded       := NULL_STRING_2_UNBOUNDED;
      Current_Line_Size       : Integer_4_Positive       := DEFAULT_LINE_SIZE;
      Current_Number_of_Tasks : Integer_4_Positive       := 1;
      Current_Number_Of_Lines : Integer_8_Natural        := 0;
      Current_Failure         : Boolean                  := False;
      Current_Do_Put_Debug    : Boolean                  := False;
    end Protected_Data;
  Data : Protected_Data;
end Neo;
