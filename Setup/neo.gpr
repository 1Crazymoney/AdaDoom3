--with "../Engine/Libraries/Florist/share/gpr/florist.gpr"; -- POSIX bindings for X11 systems

project Neo is
  
  -------------
  -- Options --
  -------------
    type Option_Boolean      is("No", "Yes");
    type Option_Word_Size    is("32", "64");
    type Option_Architecture is("ARM", "PowerPC", "x86-64");
    type Option_System       is("Windows", "X11", "Cocoa", "Wayland", "WindowsSDL", "UnixSDL", "Xbox", "PlayStation");
    type Option_Game         is("DOOM", "Warsow");
  ---------------
  -- Scenarios -- In the GPS IDE scenarios are displayed with the latest External call on top within the widget
  ---------------
    DEBUG        : Option_Boolean      := External("Debug",        "Yes");
    OPTIMIZE     : Option_Boolean      := External("Optimize",     "Yes");
    SAFETY       : Option_Boolean      := External("Safety",       "Yes");
    WORD_SIZE    : Option_Word_Size    := External("Wordsize",     "32");
    ARCHITECTURE : Option_Architecture := External("Architecture", "x86-64");
    SYSTEM       : Option_System       := External("System",       "Windows");
    STEAM        : Option_Boolean      := External("Steam",        "Yes");
    GAME         : Option_Game         := External("Game",         "DOOM");
  ------------
  -- Naming --
  ------------
    S                                   := "/"; -- Gprbuild automatically substitutes  "/" with "\" on Windows platforms
    Languages                           := ("Ada", "C", "Project File");--, "C", "C++", "Java", "Pascal", "Shell", "Autoconf", "Changelog", "C for Graphics", "Visual Basic", "Apple Script");
    Casing                              := "Lowercase";
    Version_Control                     := "Git";
    Dot_Replacement                     := "-";
    Executable                          := "game" & WORD_SIZE;
    Extension_Ada_Specification         := ".ads";
    Extension_Ada_Body                  := ".adb";
    Extension_C_Specification           := ".h";
    Extension_C_Body                    := ".c";
    Extension_C_Plus_Plus_Specification := ".hpp";
    Extension_C_Plus_Plus_Body          := ".cpp";
    Extension_Pascal                    := ".pas";
    Extension_Java                      := ".java";
    Extension_Shell                     := ".sh";
    Extension_Auto_Configure            := ".ac";
    Extension_C_For_Graphics            := ".cg";
    Extension_Visual_Basic              := ".vbs";
    Extension_Apple_Script              := ".APPLESCRIPT";
    Extension_Mark_Down                 := ".md"; -- Use - instead of * to avoid changelog syntax highlighting in markdown files
    Extension_Library                   := ".lib";
    case SYSTEM is
      when "Windows" | "WindowsSDL" => Extension_Library := ".dll";
      when others                   => null;
    end case;
  -----------------
  -- Directories --
  -----------------
    Directory_Project       := ".";
    Directory_Null_API      := "Null";
    Directory_POSIX         := "POSIX";
    Directory_Macintosh     := "Macintosh";
    Directory_Windowing     := "Windowing";
    Directory_Root          := Directory_Project  & S & ".." ;
    Directory_Engine        := Directory_Root     & S & "Engine";
    Directory_Objects       := Directory_Root     & S & "Objects";
    Directory_Binaries      := Directory_Root     & S & "Binaries";
    Directory_Game          := Directory_Root     & S & "Games"         & S & GAME;
    Directory_Architectures := Directory_Engine   & S & "Architectures" & S & ARCHITECTURE;
    Directory_Libraries     := Directory_Engine   & S & "Libraries"     & S & "**";
    Directory_APIs          := Directory_Engine   & S & "APIs";
    Directory_Systems       := Directory_Engine   & S & "Systems";
    Directory_SDL           := Directory_Systems  & S & "SDL";
    Directory_Documentation := Directory_Game     & S & "Documentation";
    Directory_Base          := Directory_Game     & S & "Base";
    Directory_Direct3D      := Directory_APIs     & S & "Direct3D";
    Directory_XAudio        := Directory_APIs     & S & "XAudio";
    Directory_OpenGL        := Directory_APIs     & S & "OpenGL";
    Directory_GCM           := Directory_APIs     & S & "GCM";
    Directory_Steam         := Directory_APIs     & S & "Steam";
    Directory_Null_Direct3D := Directory_Direct3D & S & Directory_Null_API;
    Directory_Null_XAudio   := Directory_XAudio   & S & Directory_Null_API;
    Directory_Null_OpenGL   := Directory_OpenGL   & S & Directory_Null_API;
    Directory_Null_GCM      := Directory_GCM      & S & Directory_Null_API;
    Directory_Null_Steam    := Directory_Steam    & S & Directory_Null_API;
    File_Main               := (Directory_Engine  & S & "main" & Extension_Ada_Body); -- Has to match Executable name in Builder package!
    Directories             := (Directory_Engine, Directory_APIs, Directory_Libraries, Directory_Root, Directory_Base, Directory_Architectures, Directory_Project);
    case SYSTEM is                     
      when "X11" | "Wayland" |         -- Scripts
           "WindowsSDL" | "UnixSDL"    => Directories := Directories & (Directory_Project & S & Directory_POSIX);
      when "Cocoa"                     => Directories := Directories & (Directory_Project & S & Directory_Macintosh);
      when others                      => Directories := Directories & (Directory_Project & S & SYSTEM);
    end case;
    case SYSTEM is                     -- Systems
      when "X11" | "Wayland" | "Cocoa" => Directories := Directories & (Directory_Systems & S & Directory_POSIX);
                                          Directories := Directories & (Directory_Systems & S & Directory_POSIX & S & Directory_Windowing & S & SYSTEM);
      when others                      => Directories := Directories & (Directory_Systems & S & SYSTEM);
    end case;
    case SYSTEM is                     -- Several APIs are cross compatible between systems
      when "Windows"                   => Directories := Directories & (                         Directory_OpenGL,      Directory_XAudio,      Directory_Direct3D,      Directory_Steam);
                                          Directories := Directories & (Directory_Null_GCM                                                                                             );
      when "Xbox"                      => Directories := Directories & (                                                Directory_XAudio,      Directory_Direct3D                      );
                                          Directories := Directories & (Directory_Null_GCM, Directory_Null_OpenGL,                                                 Directory_Null_Steam);
      when "PlayStation"               => Directories := Directories & (     Directory_GCM                                                                                             );
                                          Directories := Directories & (                    Directory_Null_OpenGL, Directory_Null_XAudio, Directory_Null_Direct3D, Directory_Null_Steam);
      when "WindowsSDL" | "UnixSDL"    => Directories := Directories & (                         Directory_OpenGL                                                                      );
                                          Directories := Directories & (Directory_Null_GCM,                        Directory_Null_XAudio, Directory_Null_Direct3D, Directory_Null_Steam);
      when "X11" | "Wayland" | "Cocoa" => Directories := Directories & (                         Directory_OpenGL,                                                      Directory_Steam);
                                          Directories := Directories & (Directory_Null_GCM,                        Directory_Null_XAudio, Directory_Null_Direct3D                      );
    end case;
  --------------
  -- Switches --
  --------------
    Switch_Binder   :=(
      --"-u0",
      "-E");
    Switch_Linker   :=(
      ""
      --"Wl,--enable-stdcall-fixup"
      --"-Wl,--stack,0x40000000"
      );--"-fprofile-generate");--,                                                             -- Generate code coverage                                                                         
      --Directory_Binaries & S & "libopus"       & WORD_SIZE & Extension_Library,         --
      --Directory_Binaries & S & "libogg"        & WORD_SIZE & Extension_Library,         --
      --Directory_Binaries & S & "libtheora"     & WORD_SIZE & Extension_Library,         --
      --Directory_Binaries & S & "libvorbis"     & WORD_SIZE & Extension_Library,         --
      --Directory_Binaries & S & "libvorbisfile" & WORD_SIZE & Extension_Library);        --
    Switch_Compiler :=(
      "-gnateE",
      "-gnatW8",                                                                        -- Enable unicode identifiers
      "-gnat2012");                                                                     -- Enable the Ada 2012 extensions
    Switch_Builder  :=(
      "-j4",                                                                            -- Use four tasks during compilation
      "-k",                                                                             -- "Keep going", build as far as possible
      "-C",                                                                             -- Use mapping file
      "-s");                                                                            -- Recompile if switches are changed
    case SAFETY is
      when "Yes" =>
        Switch_Compiler := Switch_Compiler &(
          "-fstack-check",                                                              -- Generate checks for exceeding the stack
          "-gnato",                                                                     -- Enable overflow checking for numerics
          "-gnatE",                                                                     -- Enable dynamic generic elaboration checks
          "-gnata");                                                                    -- Enable pre and post conditions
      when "No"  => null;
    end case;
    case DEBUG is
      when "Yes" =>
        Switch_Binder   := Switch_Binder   & ("-E");                                    -- Store traceback in exceptions
        Switch_Compiler := Switch_Compiler & ("-g");                                    -- Create extended information in stack traces
      when "No"  => null;
    end case;
    case WORD_SIZE is
      when "64" => Switch_Compiler := Switch_Compiler & ("-m64");                       -- Try 64 bit compilation
      when "32" => null;
    end case;
    case SYSTEM is
      when "Windows" =>
        case DEBUG is
          when "Yes" =>
          when "No"  => Switch_Linker := Switch_Linker & ("-mwindows");                 -- Remove the command console in Windows
        end case;
        Switch_Linker := Switch_Linker &(
          External("WinDir") & S & "System32" & S & "comctl32"    & Extension_Library,
          External("WinDir") & S & "System32" & S & "D3DX9_42"    & Extension_Library,  --
          External("WinDir") & S & "System32" & S & "gdi32"       & Extension_Library,  --
          External("WinDir") & S & "System32" & S & "hid"         & Extension_Library,  --
          External("WinDir") & S & "System32" & S & "setupapi"    & Extension_Library,  --
          External("WinDir") & S & "System32" & S & "XInput9_1_0" & Extension_Library,  --
          External("WinDir") & S & "System32" & S & "ogldrv"    & Extension_Library,
          External("WinDir") & S & "System32" & S & "opengl32"    & Extension_Library
          ); --
        case WORD_SIZE is
          when "64" => null;--Switch_Linker := Switch_Linker & (External("ProgramFiles(x86)") & S & "Steam" & Extension_Library); 
          when "32" => null;--Switch_Linker := Switch_Linker & (External("ProgramFiles")      & S & "Steam" & Extension_Library);
        end case;
      when "WindowsSDL" | "UnixSDL" => Switch_Linker := Switch_Linker &(Directory_Binaries & "libsdl" & WORD_SIZE & Extension_Library);
      when "X11" => 
         Switch_Linker := Switch_Linker  & ("-lGL", "-lX11");	  
      when others => null;
    end case;
  --------------
  -- Packages --
  --------------
    for Exec_Dir                        use Directory_Game;
    for Object_Dir                      use Directory_Objects;
    for Languages                       use Languages;
    for Main                            use File_Main;
    for Source_Dirs                     use Directories;
    package IDE is
      for VCS_Kind                      use Version_Control;
      for Documentation_Dir             use Directory_Documentation;
    end Ide;
    package Naming is
      for Dot_Replacement               use Dot_Replacement;
      for Casing                        use Casing;
      for Spec_Suffix("Ada")            use Extension_Ada_Specification;
      for Body_Suffix("Ada")            use Extension_Ada_Body;
      --for Spec_Suffix("C++")            use Extension_C_Plus_Plus_Specification;
      --for Body_Suffix("C++")            use Extension_C_Plus_Plus_Body;
      for Spec_Suffix("C")              use Extension_C_Specification;
      for Body_Suffix("C")              use Extension_C_Body;
      --for Body_Suffix("Pascal")         use Extension_Pascal;
      for Body_Suffix("Changelog")      use Extension_Mark_Down;
      --for Body_Suffix("Java")           use Extension_Java;
      --for Body_Suffix("Shell")          use Extension_Shell;
      --for Body_Suffix("Autoconf")       use Extension_Auto_Configure;
      --for Body_Suffix("C for Graphics") use Extension_C_For_Graphics;
      --for Body_Suffix("Visual Basic")   use Extension_Visual_Basic;
      --for Body_Suffix("Apple Script")   use Extension_Apple_Script;
    end Naming;
    package Builder is
      for Executable("main.adb")        use Executable;
      for Default_Switches("Ada")       use Switch_Builder;
    end Builder;
    package Binder is
      for Default_Switches("Ada")       use Switch_Binder;
    end Binder;
    package Linker is
      for Default_Switches("Ada")       use Switch_Linker;
    end Linker;
  ------------------
  -- Optimization -- 
  ------------------
    package Compiler is
      case OPTIMIZE is
        when "No"  => for Default_Switches("Ada") use Switch_Compiler;
        when "Yes" => for Default_Switches("Ada") use Switch_Compiler & ("-O3"); 
      end case;
      for Switches("neo-command.adb")                       use Switch_Compiler & ("-O2"); 
      for Switches("neo-system-input.adb")                  use Switch_Compiler & ("-O3");
      for Switches("neo-system-processor.adb")              use Switch_Compiler & ("-O1"); 
      for Switches("neo-system-graphics-window.adb")        use Switch_Compiler & ("-O3"); 
      for Switches("neo-system-graphics.adb")               use Switch_Compiler & ("-O1");  
      for Switches("neo-system-graphics-opengl.adb")        use Switch_Compiler & ("-O1"); 
      for Switches("neo-system-graphics-opengl-import.adb") use Switch_Compiler & ("-O1");
    end Compiler;
end Neo;
