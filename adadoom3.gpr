--
--
--
--
--
--
--
-- The windows version of gps does not come with a 64 bit version of gnatmake and when I search for MinGW
-- builds with 64 bit support they lack support for things like laddr2line (needed for -g flag). This makes
-- 64 bit builds effectively impossible for Windows users not used to commandline.
--
--
--
--
--
--
project AdaDoom3 is
  -------------
  -- Options --
  -------------
    type Option_System is(
      "SDL",
      "Linux",
      "Macintosh",
      "Windows");
    type Option_Processor is(
      "ARM",
      "PowerPC",
      "x86-64");
    type Option_Compiler is(
      "ObjectAda",
      "GNAT");
    type Option_Build is(
      "32-Bit",
      "64-Bit");
    type Option_Boolean is(
      "Yes",
      "No");
  ---------------
  -- Scenarios --  In the GPS GUI scenarios are displayed with the latest External call on top within the widget
  ---------------
    DEBUGGING : Option_Boolean   := External("Debugging", "Yes");
    OPTIMIZE  : Option_Boolean   := External("Optimize",  "Yes");
    SAFETY    : Option_Boolean   := External("Safety",    "Yes");
    BUILD     : Option_Build     := External("Build",     "32-Bit");
    COMPILER  : Option_Compiler  := External("Compiler",  "GNAT");
    PROCESSOR : Option_Processor := External("Processor", "x86-64");
    SYSTEM    : Option_System    := External("System",    "Windows");
  ----------------
  -- Filesystem --
  ----------------
    Separator := "/";
    case SYSTEM is
      when "Windows"       => Separator := "\";
      when "Macintosh"     => Separator := ":";
      when "Linux" | "SDL" => Separator := "/";
    end case;
    case SYSTEM is
      when "Windows" | "SDL" =>
        for Source_Dirs use
          Base,
          Base & Separator & SYSTEM,
          Base & Separator & COMPILER,
          Base & Separator & PROCESSOR);
      when "Linux" | "Macintosh" =>
        for Source_Dirs use
          Base,
          Base & Separator & SYSTEM,
          Base & Separator & COMPILER,
          Base & Separator & PROCESSOR,
          Base & Separator & "POSIX");
    end case;
    for Exec_Dir             use ".";
    for Object_Dir           use "Object";
    for Main                 use ("main.adb");
    package Ide is
      for Documentation_Dir  use "Documentation";
    end Ide;
    package Naming is
      for Casing             use "Lowercase";
      for Dot_Replacement    use "-";
      for Spec_Suffix("Ada") use ".ads";
      for Body_Suffix("Ada") use ".adb";
    end Naming;                            
  --------------
  -- Switches --
  --------------
    Switch_Binder   :=();
    Switch_Linker   :=(
      "-fprofile-generate");                                          -- Generate code coverage
    Switch_Compiler :=(
      "-gnatW8",                                                      -- Enable unicode identifiers
      "-gnat2012");                                                   -- Enable the Ada 2012 extensions
    Switch_Builder  :=(
      "-j4",                                                          -- Use four tasks during compilation
      "-k",                                                           -- "Keep going", build as far as possible
      "-C",                                                           -- Use mapping file
      "-s");                                                          -- Recompile if switches are changed
    case OPTIMIZE is
      when "Yes"    => Switch_Compiler := Switch_Compiler & ("-O3");  -- Full optimization and automatic inlining
      when "No"     => null;
    end case;
    case BUILD is
      when "64-Bit" => Switch_Compiler := Switch_Compiler & ("-m64"); -- Force 64 bit compilation
      when "32-Bit" => null;
    end case;
    case DEBUGGING is
      when "Yes" =>
        Switch_Binder   := Switch_Binder   & ("-E");                  -- Store traceback in exceptions
        Switch_Compiler := Switch_Compiler & ("-g");                  -- Create extended information in stack traces
      when "No" => null;
    end case;
    case SAFETY is
      when "Yes" =>
        Switch_Compiler :=
          Switch_Compiler &(
          "-fstack-check",                                            -- Generate checks for exceeding the stack
          "-gnato",                                                   -- Enable overflow checking for numerics
          "-gnatE",                                                   -- Enable dynamic generic elaboration checks
          "-gnata");                                                  -- Enable pre and post conditions
      when "Off" => null;
    end case;
    package Builder is
      for Default_Switches("Ada") use Switch_Builder;
    end Builder;
    package Compiler is
      for Default_Switches("Ada") use Switch_Compiler;
    end Compiler;
    package Binder is
      for Default_Switches("Ada") use Switch_Binder;
    end Binder;
    package Linker is
      for Default_Switches("Ada") use Switch_Linker;
    end Linker;
end AdaDoom3;
